{"version":3,"file":"index.esm.js","sources":["../node_modules/@x-drive/utils/dist/index.esm.js","../src/@mods/memo.ts","../src/index.ts"],"sourcesContent":["/**\r\n * 数据类型判断\r\n * @param  subject 待判断的数据\r\n * @param  type    数据类型名字\r\n * @return         判断结果\r\n */\r\nfunction is(subject, type) {\r\n    return Object.prototype.toString.call(subject).substr(8, type.length).toLowerCase() === type;\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isObject(subject) {\r\n    return is(subject, \"object\");\r\n}\n\n/**\r\n * 是否 undefined\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isUndefined(subject) {\r\n    return is(subject, \"undefined\");\r\n}\n\n/**\r\n * 带花括号标签检测正则\r\n * @type {RegExp}\r\n */\r\nvar labelReplaceExp = /\\{(\\w+)\\}/g;\r\n/**\r\n * 批量替换字符串中带花括号标签为指定数据\r\n * @param  tpl  待处理的字符串\r\n * @param  data 替换数据\r\n * @param  keep 是否保留未能解析的标签\r\n * @return      替换后端字符串\r\n * @example\r\n * ```tsx\r\n * labelReplace('{a}/{b}/c', {a: 1, b: 2}) // 1/2/c\r\n * labelReplace('{a}/{b}/c', {a: 1}, true) // 1/{b}/c\r\n * ```\r\n */\r\nfunction labelReplace(tpl, data, keep) {\n    if ( keep === void 0 ) keep = false;\n\r\n    return tpl.replace(labelReplaceExp, function (_, key) {\r\n        var re = isObject(data) ? data[key] : data;\r\n        if (isUndefined(re) && keep) {\r\n            return _;\r\n        }\r\n        return re;\r\n    });\r\n}\n\n/**\r\n * 是否是数组且长度大于0\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isValidArray(subject) {\r\n    return Array.isArray(subject) && subject.length > 0;\r\n}\n\n/**\r\n * 伪数组转成数组\r\n * @param   args 伪数组对象\r\n * @return       转化后的数组\r\n */\r\nfunction toArray(args) {\r\n    return Array.prototype.slice.call(args);\r\n}\n\n/**\r\n * 是否是函数\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isFunction(subject) {\r\n    return is(subject, \"function\");\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isArray(subject) {\r\n    return Array.isArray(subject);\r\n}\n\n/**\r\n * 通用遍历函数\r\n * @param  data    待遍历数据\r\n * @param  handler 处理函数\r\n * @param  context 作用域\r\n */\r\nfunction each(data, handler, context) {\r\n    context = context || this;\r\n    var hasHandler = isFunction(handler);\r\n    if (isArray(data)) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            var re = true;\r\n            if (hasHandler) {\r\n                re = handler.call(context, data[i], i);\r\n            }\r\n            if (re === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(data)) {\r\n        var keys = Object.keys(data);\r\n        for (var i$1 = 0; i$1 < keys.length; i$1++) {\r\n            var re$1 = true;\r\n            if (hasHandler) {\r\n                re$1 = handler.call(context, data[keys[i$1]], keys[i$1]);\r\n            }\r\n            if (re$1 === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * 对象扩展方法\r\n * @return 合并后的对象\r\n */\r\nfunction extend() {\r\n    var args = toArray(arguments);\r\n    var dat = args.shift();\r\n    if (dat) {\r\n        if (args.length) {\r\n            while (args.length) {\r\n                var item = args.shift();\r\n                if (item) {\r\n                    each(item, function (val, key) {\r\n                        dat[key] = val;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return dat;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * 合并\r\n * @param target  合并基准对象\r\n * @param sources 后续合并对象\r\n */\r\nfunction merge(target) {\n    var obj, obj$1;\n\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\r\n    if (!sources.length)\r\n        { return target; }\r\n    var source = sources.shift();\r\n    if (isObject(target) && isObject(source)) {\r\n        for (var key in source) {\r\n            if (isObject(source[key])) {\r\n                if (!target[key]) {\r\n                    Object.assign(target, ( obj = {}, obj[key] = {}, obj ));\r\n                }\r\n                merge(target[key], source[key]);\r\n            }\r\n            else {\r\n                Object.assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\r\n            }\r\n        }\r\n    }\r\n    return merge.apply(void 0, [ target ].concat( sources ));\r\n}\n\n/**\r\n * 是否是字符串\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isString(subject) {\r\n    return is(subject, \"string\");\r\n}\n\n/**\r\n * 大写字母匹配正则\r\n */\r\nvar UPPER_CASE_REGEXP = /[A-Z]/g;\r\n/**\r\n * 转化为蛇形命名\r\n * @param  str 待处理的字符串\r\n * @return     处理后的字符串\r\n */\r\nfunction toUnderlineName(str) {\r\n    if (isString(str)) {\r\n        return str.replace(UPPER_CASE_REGEXP, function (m, i) { return (\"\" + (i ? '_' : '') + (m.toLowerCase())); });\r\n    }\r\n    return str;\r\n}\n\n/**\r\n * 简单复制\r\n * @param  item 原始数据\r\n * @return      复制后的数据\r\n */\r\nfunction copy(item) {\r\n    return JSON.parse(JSON.stringify(item));\r\n}\n\n/**\r\n * 格式化数字, 自动补0前续\r\n * @param  number 要格式化的数字\r\n * @param  size   格式化后出来的数字位数\r\n * @return        格式化结果\r\n */\r\nfunction fix0(number, size) {\r\n    number = number.toString();\r\n    while ((number).length < size) {\r\n        number = '0' + number;\r\n    }\r\n    return number;\r\n}\n\n/**\r\n * 是否是数字\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNumber(subject) {\r\n    return !isNaN(subject) && is(subject, \"number\");\r\n}\n\n/**\r\n * 是否是 null\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNull(subject) {\r\n    return is(subject, \"null\");\r\n}\n\n/**\r\n * 按位数格式化数字\r\n * @param  val       要格式化的数字\r\n * @param  separator 分割符\r\n * @param  size      分割位数间隔\r\n * @return           格式化完的字符串\r\n */\r\nfunction numberFormat(val, separator, size) {\r\n    if (!isNumber(val)) {\r\n        return \"0\";\r\n    }\r\n    if (isUndefined(separator) || isNull(separator)) {\r\n        separator = \",\";\r\n    }\r\n    if (!isNumber(size)) {\r\n        size = 3;\r\n    }\r\n    var last = size;\r\n    val = val.toString();\r\n    var pos = val.indexOf(\".\");\r\n    var res = \"\";\r\n    if (pos === -1) {\r\n        pos = val.length;\r\n    }\r\n    else {\r\n        res = val.substr(pos);\r\n    }\r\n    if (val.charAt(0) === \"-\") {\r\n        last++;\r\n    }\r\n    while (pos > last) {\r\n        pos -= size;\r\n        res = separator + val.substr(pos, size) + res;\r\n    }\r\n    if (pos) {\r\n        res = val.substr(0, pos) + res;\r\n    }\r\n    return res;\r\n}\n\n/**\r\n * 数组随机分布\r\n * @param  arr  原始数组\r\n * @return      打乱后的数组\r\n */\r\nfunction shuffle(arr) {\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        var rIndex = Math.floor(Math.random() * (i + 1));\r\n        var item = arr[rIndex];\r\n        arr[rIndex] = arr[i];\r\n        arr[i] = item;\r\n    }\r\n    return arr;\r\n}\n\n/**\r\n * 获取包含指定范围内的随机数\r\n * @param  max 最大范围(包含)\r\n * @param  min 最小范围(包含，默认 0)\r\n * @return     随机数\r\n */\r\nfunction random(max, min) {\r\n    if (min === undefined) {\r\n        min = 0;\r\n    }\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\n\n/**\r\n * 序列化请求参数\r\n * @param  query 参数对象\r\n * @return       参数字符串\r\n */\r\nfunction serialize(query, encode) {\n    if ( encode === void 0 ) encode = false;\n\r\n    return Object.keys(query)\r\n        .map(function (key) { return (key + \"=\" + (encode ? encodeURIComponent(query[key]) : query[key])); })\r\n        .join('&');\r\n}\n\n/**\r\n * 请求参数对象转成请求参数字符串\r\n * @param dat 请求参数\r\n */\r\nfunction queryString(dat) {\r\n    var queryStr;\r\n    if (dat) {\r\n        queryStr = Object.keys(dat)\r\n            .map(function (key) {\r\n            return (key + \"=\" + (encodeURIComponent(dat[key])));\r\n        })\r\n            .join('&');\r\n    }\r\n    else {\r\n        queryStr = '';\r\n    }\r\n    return queryStr;\r\n}\n\n/**\r\n * 时间分割正则\r\n */\r\nvar DATE_REGEXP = /[^\\d]+/;\r\n/**\r\n * 转换对象为JS Date对象\r\n * @param   date   <可选> 日期数据(时间戳, 字符串, Date对象, 空)\r\n * @param   offset 修正偏移的秒数\r\n * @return         返回JS Date对象 / NULL 日期格式错误\r\n */\r\nfunction toDate(date, offset) {\r\n    var ts;\r\n    if (date instanceof Date) {\r\n        ts = date;\r\n    }\r\n    else if (isNumber(date)) {\r\n        ts = new Date(date);\r\n    }\r\n    else if (isNaN(+date)) {\r\n        if (isString(date)) {\r\n            date = date.split(DATE_REGEXP);\r\n            if (date.length === 3) {\r\n                ts = new Date(+date[0], date[1] - 1, +date[2], 0, 0, 0, 0);\r\n                if (isNaN(+ts)) {\r\n                    ts = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!ts) {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n        ts = new Date();\r\n        if (date > 5e8) {\r\n            // 时间戳\r\n            ts.setTime(date * 1000);\r\n        }\r\n        else {\r\n            // 时间偏移(秒数)\r\n            ts.setTime(ts.getTime() + date * 1000);\r\n        }\r\n    }\r\n    if (!isNaN(Number(offset))) {\r\n        ts.setTime(ts.getTime() + offset * 1000);\r\n    }\r\n    return ts;\r\n}\n\n/**\r\n * 日期格式化格式匹配正则\r\n */\r\nvar FORMAT_REGEXP = /[YymndjNwaAghGHisT]/g;\r\n/**\r\n * 按照指定格式将日期对象或时间戳转化为日期字符串\r\n * @param  date   日期对象或时间戳\r\n * @param  format 日期格式\r\n * @param  offset 修正偏移的秒数\r\n * @return        日期\r\n */\r\nfunction date(date, format, offset) {\r\n    format = format || \"Y-m-d H:i:s\";\r\n    var timestamp = toDate(date, offset);\r\n    if (timestamp === null) {\r\n        timestamp = new Date();\r\n    }\r\n    return format.replace(FORMAT_REGEXP, function formatCallback(tag) {\r\n        switch (tag) {\r\n            case \"Y\": return timestamp.getFullYear();\r\n            case \"y\": return timestamp.getFullYear() % 100;\r\n            case \"m\": return fix0(timestamp.getMonth() + 1, 2);\r\n            case \"n\": return timestamp.getMonth() + 1;\r\n            case \"d\": return fix0(timestamp.getDate(), 2);\r\n            case \"j\": return timestamp.getDate();\r\n            case \"N\": return timestamp.getDay();\r\n            case \"w\": return timestamp.getDay() % 7;\r\n            case \"a\": return timestamp.getHours() < 12 ? \"am\" : \"pm\";\r\n            case \"A\": return timestamp.getHours() < 12 ? \"AM\" : \"PM\";\r\n            case \"g\": return timestamp.getHours() % 12 + 1;\r\n            case \"h\": return fix0(timestamp.getHours() % 12 + 1, 2);\r\n            case \"G\": return timestamp.getHours();\r\n            case \"H\": return fix0(timestamp.getHours(), 2);\r\n            case \"i\": return fix0(timestamp.getMinutes(), 2);\r\n            case \"s\": return fix0(timestamp.getSeconds(), 2);\r\n            case \"T\": return Math.round(timestamp.getTime() / 1000);\r\n        }\r\n        return tag;\r\n    });\r\n}\n\n/**\r\n * 是否是正则\r\n * @param subject 待判断数据\r\n */\r\nfunction isRegexp(subject) {\r\n    return is(subject, \"regexp\");\r\n}\n\n/**\r\n * 是否是错误对象\r\n * @param subject 待判断数据\r\n */\r\nfunction isError(subject) {\r\n    return is(subject, \"error\");\r\n}\n\n/**\r\n * 是否是布尔值\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isBoolean(subject) {\r\n    return is(subject, \"boolean\");\r\n}\n\n/**\r\n * 浮点数字精度处理\r\n * @param  num   待处理数字\r\n * @param  dec   精度\r\n * @return       处理后的数字\r\n */\r\nfunction getNumberWithDec(num, dec) {\r\n    var pow10s = Math.pow(10, dec || 0);\r\n    return (dec) ? Math.round(pow10s * num) / pow10s : num;\r\n}\n\n/**\r\n * 获取一组数组中的平均数\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     平均数\r\n */\r\nfunction getNumberAverage(arr, dec) {\r\n    var i = arr.length, sum = 0;\r\n    while (i--) {\r\n        sum += arr[i];\r\n    }\r\n    return getNumberWithDec((sum / arr.length), dec);\r\n}\n\n/**\r\n * 获取一组数组中的方差\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     方差\r\n */\r\nfunction getNumberVariance(arr, dec) {\r\n    var avg = getNumberAverage(arr, dec), i = arr.length, v = 0;\r\n    while (i--) {\r\n        v += Math.pow((arr[i] - avg), 2);\r\n    }\r\n    v /= (arr.length - 1);\r\n    return getNumberWithDec(v, dec);\r\n}\n\n/**\r\n * 获取一组数组中的标准差\r\n * @param  arr  待处理数组\r\n * @param  dec  保留精度\r\n * @return      标准差\r\n */\r\nfunction getStdDeviation(arr, dec) {\r\n    var stdDev = Math.sqrt(getNumberVariance(arr, dec));\r\n    return getNumberWithDec(stdDev, dec);\r\n}\n\n/**\r\n * 解析输入文本，输出带对应 kv 的对象\r\n * @param str        待处理字符串\r\n * @param separator  分割符号\r\n * @param assignment 赋值符号\r\n * @param ignore     需要排除的数据标识\r\n * @param decode     是否执行 decode 操作\r\n */\r\nfunction parseStr(str, separator, assignment, ignore, decode) {\n    if ( separator === void 0 ) separator = \"&\";\n    if ( assignment === void 0 ) assignment = \"=\";\n    if ( ignore === void 0 ) ignore = /^#/;\n    if ( decode === void 0 ) decode = true;\n\r\n    if (isString(str)) {\r\n        var subject = str.split(separator).reduce(function (res, part) {\r\n            if (ignore.test(part)) {\r\n                return res;\r\n            }\r\n            var partArr = part.split(assignment);\r\n            res[partArr[0]] = decode && !isUndefined(partArr[1]) ? decodeURIComponent(partArr[1]) : partArr[1];\r\n            return res;\r\n        }, Object.create(null));\r\n        return subject;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\n\nexport { copy, date, each, extend, fix0, getNumberAverage, getNumberVariance, getNumberWithDec, getStdDeviation, is, isArray, isBoolean, isError, isFunction, isNull, isNumber, isObject, isRegexp, isString, isUndefined, isValidArray, labelReplace, labelReplaceExp, merge, numberFormat, parseStr, queryString, random, serialize, shuffle, toArray, toDate, toUnderlineName };\n//# sourceMappingURL=index.esm.js.map\n","class MemoCache {\n    protected store: object = Object.create(null);\n    getItem<T>(key:string):T {\n        return this.store[key];\n    }\n\n    setItem(key:string, value:any):void {\n        this.store[key] = value;\n    }\n\n    removeItem(key:string):void {\n        this.store[key] = null;\n        delete this.store[key];\n    }\n}\n\nexport default MemoCache\n","import { merge } from \"@x-drive/utils\";\nimport MemoCache from \"./@mods/memo\";\n\n/**存储类型定义 */\nenum CacheType {\n    /**localStorage */\n    lStorage\n    /**sessionStorage */\n    , sStorage\n    /**内存 */\n    , memo\n};\n\nexport { CacheType };\n\n/**\n * 缓存配置\n */\ninterface CacheConf {\n    /** 缓存类型 */\n    type?: CacheType\n    /** 全局过期时间 */\n    expires?: number\n    /** 缓存key前缀*/\n    prefix?: string\n    /** 限制上限 */\n    maxStack?: number\n};\n\n/**单条数据缓存配置 */\ninterface DataConf {\n    /**单条数据过期时间 */\n    expires?: number\n\n    /**缓存生效条件 */\n    conditions?: object\n};\n\n/**缓存前缀键名 */\nconst PREFIX: string = \"__F_CACHE__\";\n\n/**缓存堆键名 */\nconst STACK_KEY: string = \"_STACK__\";\n\nclass Cache {\n    /**实例配置 */\n    config: CacheConf = {\n        \"type\": 0\n        , \"expires\": 0\n        , \"prefix\": \"\"\n        , \"maxStack\": 200\n    }\n\n    /**实例存储键前缀 */\n    protected prefix: string = \"\";\n\n    /**存储数据堆键名 */\n    private stackKey: string = \"\";\n\n    /**实例内部存储对象 */\n    protected store: any;\n\n    /**当前实例已存储的数据堆栈 */\n    protected stack: string[] = [];\n\n    constructor(conf: CacheConf = {}) {\n        this.config = merge(this.config, conf);\n        this.prefix = `${PREFIX}${this.config.prefix}_`;\n\n        // 获取缓存类型\n        switch (conf.type) {\n            case CacheType.lStorage:\n                this.store = localStorage;\n                break;\n            case CacheType.sStorage:\n                this.store = sessionStorage;\n                break;\n            case CacheType.memo:\n                this.store = new MemoCache();\n                break;\n            default:\n                this.store = sessionStorage;\n        }\n        this.stackKey = `${this.prefix}${STACK_KEY}`;\n        var stack = this.store.getItem(this.stackKey);\n        if (stack) {\n            try {\n                stack = JSON.parse(stack);\n            } catch (err) {\n                stack = [];\n            }\n        } else {\n            stack = [];\n        }\n\n        this.stack = stack;\n\n        conf = stack = null;\n\n        return this;\n    }\n\n    /**同步堆栈信息 */\n    private syncStack() {\n        this.store.setItem(this.stackKey, JSON.stringify(this.stack));\n    }\n\n    /**当前缓存类型存储的数据数量 */\n    get length(): number {\n        return this.stack.length;\n    }\n\n    /**当前存储是否已经超出上限 */\n    get isStackOOM(): boolean {\n        return this.stack.length >= this.config.maxStack;\n    }\n\n    /**\n     * 存储数据\n     * @param key   数据键值\n     * @param value 数据\n     * @param conf  数据缓存配置\n     * @returns     模块实例对象\n     * @example\n     * ```tsx\n     * // 存储数据\n     * Cache.set(\"test\", 123456)\n     * Cache.set(\"test\", 123456, {expires: 10})\n     * ```\n     */\n    set(key: string, value:any, conf?: DataConf) {\n        const datConf: DataConf = merge(\n            {\n                \"expires\": this.config.expires\n            }\n            , conf\n        );\n\n        let expires = datConf.expires;\n        if (expires) {\n            expires = Date.now() + (datConf.expires * 1000);\n        }\n\n        const innerKey = `${this.prefix}${key}`;\n\n        this.store.setItem(\n            innerKey\n            , JSON.stringify({\n                value,\n                expires\n            })\n        );\n\n        const index = this.stack.indexOf(innerKey);\n        if (index === -1) {\n            if (this.isStackOOM) {\n                this.store.removeItem(this.stack.shift());\n            }\n            this.stack.push(innerKey);\n            this.syncStack();\n        }\n\n        return this;\n    }\n\n    /**\n     * 获取存储的数据\n     * @param key 存储数据的键值\n     * @example\n     * ```tsx\n     * // 获取存储数据\n     * Cache.get(\"test\")\n     * ```\n     */\n    get(key: string) {\n        const innerKey = `${this.prefix}${key}`;\n        let item = this.store.getItem(innerKey);\n        const now = Date.now();\n        if (item) {\n            item = JSON.parse(item);\n            if (item.expires && now > item.expires) {\n                this.del(\n                    innerKey.slice(this.prefix.length)\n                );\n                return null;\n            } else {\n                return item.value;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 删除已经存储的数据\n     * @param   key 存储数据的键值\n     * @returns     模块实例对象\n     * @example\n     * ```tsx\n     * // 获取存储数据\n     * Cache.del(\"test\")\n     * ```\n     */\n    del(key: string) {\n        const innerKey = `${this.prefix}${key}`;\n        const index = this.stack.indexOf(innerKey);\n        if (index !== -1) {\n            this.store.removeItem(innerKey);\n            this.stack.splice(index, 1);\n            this.syncStack();\n        }\n        return this;\n    }\n}\nexport default Cache;"],"names":[],"mappings":"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"}